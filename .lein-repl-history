(require '[marcliberatore.mallet-lda :refer [lda make-instance-list]])
(require '[marcliberatore.mallet-lda :refer [lda make-instance-list]] :reload-all)
(def example-data (make-instance-list [[1 ["clojure" "ruby"]]]))
(def the-model (lda example-data :num-iter 2))
(get-top-words 3)
(require '[marcliberatore.mallet-lda :refer [lda make-instance-list] :as lda] :reload-all)
(lda/get-num-types the-model)
(lda/get-num-type the-model)
(.get-num-type the-model)
(get-num-type the-model)
(lda/get-num-type the-model)
(lda/get-num-type)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet])
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-num-types the-model)
(mallet/get-num-types the-model)
(.mallet/get-num-types the-model)
(.get-num-types the-model)
(get-num-types the-model)
the-model
(get-alphabet the-model)
(the-model.)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(get-alphabet the-model)
(mallet/get-alphabet the-model)
(get-alphabet the-model)
(mallet/get-alphabet the-model)
(get-alphabet the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/test1 the-model)
(mallet/get-num-type the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-num-types the-model)
(def example-data (make-instance-list [[1 ["ruby" "abc"]]]))
(def the-model (lda example-data :num-iter 1))
the-model
(mallet/get-num-types the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-num-types the-model)
(mallet/get-num-types)
(mallet/get-num-types (ParallelTopicModel. ))
(import '[cc.mallet.topics ParallelTopicModel])
(mallet/get-num-types (ParallelTopicModel. ))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-num-types (ParallelTopicModel. ))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
the-model
(class? the-model)
(Class/forName the-model)
(Class/forName? the-model)
(class the-model)
(mallet/get-topic-bits the-model)
(mallet/get-num-types the-model)
(mallet/get-num-type the-model)
(mallet/get-top-words the-model)
(mallet/get-top-words the-model 5)
(mallet/get-alphabet the-model)
(mallet/get-topic-alphabet the-model)
(mallet/get-topic-bits the-model)
(mallet/get-num-types the-model)
(mallet/get-num-type the-model)
(def topics (mallet/get-topic-alphabet the-model))
(aget (topics) 1)
(aget topics 1)
topics
(.lookupLabel topics 0)
(.lookupLabel topics "0")
(.printTopWords the-model)
(.printTopWords the-model 5) 
(.printTopWords the-model nil 5 true) 
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(mallet/get-top-words the-model)
(mallet/get-top-words the-model 5)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(mallet/get-top-words the-model 5)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(use '[marcliberatore.core])
(get-alphabet the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(use [marcliberatore.core])
(use '[marcliberatore.core])
(get-top-words the-model)
(.get_top-words the-model)
(.get_top_words the-model)
(get-num-types the-model)
(get-topic-bits the-model)
(get-top-words the-model 5)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(get-topic-bits the-model)
(get-top-words the-model)
(get-top-words the-model 5)
(get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(use '[marcliberatore.core])
(get-top-words the-model)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(mallet/get-top-words the-model)
(get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(mallet/get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet])
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(mallet/get-top-words the-model)
(mallet/get-top-words the-model 5)
(get-top-words the-model 5)
(mallet/get-top-words the-model 5)
(mallet/get-top-word the-model 5)
(mallet/get-top-words the-model 5)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-top-words the-model 5)
mallet/get-top-words
(mallet/get-top-words the-model 10)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(def example-data (lda/make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda/make-model example-data :num-iter 1))
(get-top-words the-model 5)
(lda/get-top-words the-model 5)
(def 1month-ago 1)
(def month-ago 1)
Newest.new Product.random_product
reload!
Newest.new Product.random_product
reload!
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(def example-data (lda/make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda/make-model example-data :num-iter 1))
(lda/get-topic-doc-counts the-model)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(lda/get-topic-doc-counts the-model)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(lda/get-topic-doc-counts the-model)
