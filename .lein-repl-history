(require '[marcliberatore.mallet-lda :refer [lda make-instance-list]])
(require '[marcliberatore.mallet-lda :refer [lda make-instance-list]] :reload-all)
(def example-data (make-instance-list [[1 ["clojure" "ruby"]]]))
(def the-model (lda example-data :num-iter 2))
(get-top-words 3)
(require '[marcliberatore.mallet-lda :refer [lda make-instance-list] :as lda] :reload-all)
(lda/get-num-types the-model)
(lda/get-num-type the-model)
(.get-num-type the-model)
(get-num-type the-model)
(lda/get-num-type the-model)
(lda/get-num-type)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet])
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-num-types the-model)
(mallet/get-num-types the-model)
(.mallet/get-num-types the-model)
(.get-num-types the-model)
(get-num-types the-model)
the-model
(get-alphabet the-model)
(the-model.)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(get-alphabet the-model)
(mallet/get-alphabet the-model)
(get-alphabet the-model)
(mallet/get-alphabet the-model)
(get-alphabet the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/test1 the-model)
(mallet/get-num-type the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-num-types the-model)
(def example-data (make-instance-list [[1 ["ruby" "abc"]]]))
(def the-model (lda example-data :num-iter 1))
the-model
(mallet/get-num-types the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-num-types the-model)
(mallet/get-num-types)
(mallet/get-num-types (ParallelTopicModel. ))
(import '[cc.mallet.topics ParallelTopicModel])
(mallet/get-num-types (ParallelTopicModel. ))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-num-types (ParallelTopicModel. ))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
the-model
(class? the-model)
(Class/forName the-model)
(Class/forName? the-model)
(class the-model)
(mallet/get-topic-bits the-model)
(mallet/get-num-types the-model)
(mallet/get-num-type the-model)
(mallet/get-top-words the-model)
(mallet/get-top-words the-model 5)
(mallet/get-alphabet the-model)
(mallet/get-topic-alphabet the-model)
(mallet/get-topic-bits the-model)
(mallet/get-num-types the-model)
(mallet/get-num-type the-model)
(def topics (mallet/get-topic-alphabet the-model))
(aget (topics) 1)
(aget topics 1)
topics
(.lookupLabel topics 0)
(.lookupLabel topics "0")
(.printTopWords the-model)
(.printTopWords the-model 5) 
(.printTopWords the-model nil 5 true) 
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(mallet/get-top-words the-model)
(mallet/get-top-words the-model 5)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(mallet/get-top-words the-model 5)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(use '[marcliberatore.core])
(get-alphabet the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(use [marcliberatore.core])
(use '[marcliberatore.core])
(get-top-words the-model)
(.get_top-words the-model)
(.get_top_words the-model)
(get-num-types the-model)
(get-topic-bits the-model)
(get-top-words the-model 5)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(get-topic-bits the-model)
(get-top-words the-model)
(get-top-words the-model 5)
(get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(use '[marcliberatore.core])
(get-top-words the-model)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(mallet/get-top-words the-model)
(get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(mallet/get-top-words the-model)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet])
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(def example-data (make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda example-data :num-iter 1))
(get-top-words the-model)
(mallet/get-top-words the-model)
(mallet/get-top-words the-model 5)
(get-top-words the-model 5)
(mallet/get-top-words the-model 5)
(mallet/get-top-word the-model 5)
(mallet/get-top-words the-model 5)
(require '[marcliberatore.mallet-lda :refer [make-instance-list lda] :as mallet] :reload-all)
(mallet/get-top-words the-model 5)
mallet/get-top-words
(mallet/get-top-words the-model 10)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(def example-data (lda/make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda/make-model example-data :num-iter 1))
(get-top-words the-model 5)
(lda/get-top-words the-model 5)
(def 1month-ago 1)
(def month-ago 1)
Newest.new Product.random_product
reload!
Newest.new Product.random_product
reload!
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(def example-data (lda/make-instance-list [[1 ["ruby" "rails" "test"]]]))
(def the-model (lda/make-model example-data :num-iter 1))
(lda/get-topic-doc-counts the-model)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(lda/get-topic-doc-counts the-model)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(lda/get-topic-doc-counts the-model)
    
  (require '[marcliberatore.mallet.lda :as lda])
  (require '[marcliberatore.mallet.readers :as lda-readers])
  (require '[marcliberatore.mallet.readers :as lda-readers] :reload)
  (require '[marcliberatore.mallet.lda :as lda])
(def the-model (lda/make-model []))
  (require '[marcliberatore.mallet.readers :as lda-readers])
  (require '[marcliberatore.mallet.readers :as lda-readers] :reload)
  (def the-model (lda/make-model))
  (def seq-reader (lda-readers/SeqReader. the-model))
(lda-readers/->SeqReader the-model)
(def seq-reader (lda-readers/->SeqReader the-model))
  (seq-reader/slurp-data [
                          [1 ["ruby" "lda" "test" "rails"]]
                          [2 ["python" "web" "django"]]
                          ])
  (require '[marcliberatore.mallet.readers :refer [slurp-data] 
                                           :as lda-readers])
                                           :as lda-readers])  (require '[marcliberatore.mallet.readers :refer [slurp-data] 
                                           :as lda-readers] :reload)
  (require '[marcliberatore.mallet.readers :refer [slurp-data] :as lda-readers] :reload)
 (slurp-data seq-reader 
    [
      [1 ["ruby" "lda" "test" "rails"]]
      [2 ["python" "web" "django"]]
    ])
  (require '[marcliberatore.mallet.readers :refer [slurp-data] :as lda-readers] :reload)
 (require '[marcliberatore.mallet.readers :refer [slurp-data] :as lda-readers] :reload)
(slurp-data seq-reader [])
(slurp-data seq-reader)
(doc slurp-data)
(:the-model seq-reader)
(slurp-data seq-reader)
 (require '[marcliberatore.mallet.readers :refer [slurp-data] :as lda-readers] :reload-all)
(slurp-data seq-reader)
(slurp-data seq-reader [])
(slurp-data [])
(slurp-data this [])
(slurp-data 1 1)
(slurp-data seq-reader)
(slurp-data seq-reader 1)
  (require '[marcliberatore.mallet.lda :as lda])
 (require '[marcliberatore.mallet.readers :refer [slurp-data] :as lda-readers] :reload)
  (def the-model (lda/make-model))
  (def the-model (lda/make-model []))
  (def seq-reader (lda-readers/->SeqReader))
(slurp-data seq-reader [[1 ["ruby" "lda"]]])
(lda/add-instances the-model (slurp-data seq-reader [[1 ["ruby" "lda"]]]))
(require '[monger.core :as mg])
(mg/connect!)
(mg/set-db! (mg/get-db "veye_dev"))
(require '[monger.collection :as mc])
(mc/find "products" {:language "Clojure" :prod_key "ztellman/aleph"})
(mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"})
(pprint  (mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"}))
(def doc  (mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"}))
(def the-doc  (mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"}))
(for [[k v] the-doc (print k)]
)
(for [[k v] the-doc] (print k))
(for [[k v] the-doc] k)
(def the-doc  (mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"} [:prod]))
the-doc
(def the-doc  (mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"}))
(mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"})
(mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"} ["prod"])
(mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"} [":prod_key"])
(mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"} ["prod_key"])
(mc/find-one "products" {:language "Clojure" :prod_key "ztellman/aleph"} [])
(keys the-doc)
(includes? ["a"] "a")
(has? ["a"] "a")
(exists? ["a"] "a")
(includes? ["a"] "a")
(contains? ["a"] "a")
(contains? ["a"] 0)
(contains? #{"a"} 0)
(contains? (set "a") 0)
(contains? (set "a")  "a")
(contains? (set "a") "a")
(set "a")
(apply set ["a" "b"]
)
(apply set ["a" "b"])
(apply set ["ab" "bb"])
(apply set "ab" "bb")
(set "ab" "bb")
{"abc" "cde"}
(apply {} ["cd" "vf"])
(apply hash-set ["cd" "vf"])
(apply set ["cd" "vf"])
(apply set (keys the-doc))
(apply hash-set (keys the-doc))
(fields (apply hash-set (keys the-doc)))
(def fields (apply hash-set (keys the-doc)))
(contains? fields "prod_key")
(contains? fields "prod")
(keep #(contains? (hash-set "prod_key" "authors")) fields) 
(require '[clojure.string :as string])
(string/split "anb,abc" ",")
(doc string/split)
(string/split "anbc,ab,vb HGS" #"[\s|\,]")
(string/split "anbc,ab,,vb HGS" #"[\s|\,]+")
(map #(%2) {:a 1})
(map #(%) {:a 1})
(map #(print %1) {:a 1})
(map (fn [[k v] the-doc] k) {:a 1})
(map (fn [[k v]] k) {:a 1})
(defn tokenize [item]
  (-> item str string/lower-case (string/split #"[\s|\,]+")))
(tokenize "abc, andn andna andnd andndna anandnd.")
(tokenize-doc {:a "abc se, adadf sdad" :b "asca asds, asd as,sd"})
(defn tokenize-doc [the-doc]
  (mapcat (fn[[k v]] (tokenize v)))
)
(tokenize-doc {:a "abc se, adadf sdad" :b "asca asds, asd as,sd"})
(defn tokenize-doc [the-doc]
  (mapcat (fn[[k v]] (tokenize v))
          the-doc))
(tokenize-doc {:a "abc se, adadf sdad" :b "asca asds, asd as,sd"})
(select-keys the-doc ["prod" "lks"])
(select-keys the-doc ["prod_key" "lks"])
(class the-doc)
(require '[marcliberatore.mallet.lda :as lda])
  (require '[marcliberatore.mallet.lda :as lda])
 (require '[marcliberatore.mallet.lda :as lda])
(require '[marcliberatore.mallet.lda :as lda] :reload)
  (def the-model (lda/make-model))
(require '[marcliberatore.mallet.lda :as lda] :reload)
  (def the-model (lda/make-model))
  (def training-data (make-instances 
                       [
                          [1 ["ruby" "lda" "test" "rails"]]
                          [2 ["python" "web" "django"]]
                          [3 ["c" "http" "server"]]
                        ]))
  (def training-data (lda/make-instances 
                       [
                          [1 ["ruby" "lda" "test" "rails"]]
                          [2 ["python" "web" "django"]]
                          [3 ["c" "http" "server"]]
                        ]))
  (def training-data (lda/make-instance-list 
                       [
                          [1 ["ruby" "lda" "test" "rails"]]
                          [2 ["python" "web" "django"]]
                          [3 ["c" "http" "server"]]
                        ]))
(class training-data)
  (lda/train the-model training-data)
 (lda/get-top-words the-model)
  (lda/get-top-words the-model 5)
(for [a (take 5 (range 1 5))] a)
(range 1 5)
(for [a (range 1 5), b (range 10, 15)] [a, b])
(for [a (range 1 5), b (iterate inc 0)] [a, b])
(for [a (range 1 5), b (first (iterate inc 0))] [a, b])
(for [a (range 1 5), b (next (iterate inc 0))] [a, b])
(require '[marcliberatore.mallet.lda :as lda] :reload)
(lda/get-top-words the-model 5)
(require '[marcliberatore.mallet.lda :as lda] :reload)
(lda/get-top-words the-model 5)
(require '[marcliberatore.mallet.lda :as lda] :reload)
(lda/get-top-words the-model 5)
(require '[marcliberatore.mallet.lda :as lda] :reload)
(def twords (lda/get-top-words the-model 5))
(get twords 0)
(get twords 1)
(get twords)
(get twords 0)
(count twords)
(class twords)
(class (doall twords))
(get (dorun twords) 0)
(get (vec twords) 0)
(require '[marcliberatore.mallet.lda :as lda] :reload)
(get twords 0)
(def twords (lda/get-top-words the-model 5))
(get (vec twords) 0)
twords
(lda/get-topic-counts 0 0)
(lda/get-topic-counts the-model)
(lda/get-topic-doc-counts the-model)
(.getTopicPropabilities the-model 0)
(.getTopicProbabilities the-model 0)
(into [] (.getTopicProbabilities the-model 0))
(into [] (.getTopicProbabilities the-model 4))
(into [] (.getTopicProbabilities the-model 2))
(require '[marcliberatore.mallet.lda :as lda] :reload)
(require '[marcliberatore.mallet.lda :as lda] :reload-all)
(require '[marcliberatore.mallet.lda :as lda] :reload)
(lda/get-probabilities the-model 0)
(lda/get-topic-probabilities the-model 0)
(sum (lda/get-topic-probabilities the-model 0))
(apply +  (lda/get-topic-probabilities the-model 0))
(apply +  (lda/get-topic-probabilities the-model 1))
(apply +  (lda/get-topic-probabilities the-model 2))
(lda/get-topic-probabilities the-model 3)
(def alphabet (lda/get-alphabet the-model))
(.lookupIndex alphabet "1")
(.lookupIndex alphabet "2")
(.lookupIndex alphabet "3")
(.lookupIndex alphabet "4")
(.lookupIndex alphabet "5")
(.lookupIndex alphabet "1")
(.lookupIndex alphabet 1)
(.lookupObject alphabet 1)
(.lookupObject alphabet 3)
(.lookupObject alphabet 0)
(.lookupObject alphabet 3)
(.lookupObject alphabet 15)
(.lookupObject alphabet 16)
(.lookupObject alphabet 14)
(length [1 2 3])
(len [1 2 3])
(count [1 2 3])
(require '[marcliberatore.mallet.alphabet :as alphabet])
  (require '[marcliberatore.mallet.lda :as lda])
  (require '[marcliberatore.mallet.utils :as lda-utils])
  (require '[marcliberatore.mallet.alphabet :as lda-abc])
 (require '[marcliberatore.mallet.alphabet :as lda-abc])
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload)
 (require '[marcliberatore.mallet.alphabet :as lda-abc])
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload)
w
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload)
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
(class [1,2,3])
(implements [1,2,3])
(protocols [1,2,3])
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
(keys (:impls clojure.lang.Counter))
(keys (:impls clojure.lang.Countet))
(keys (:impls clojure.lang.Counted))
(keys (:impls clojure.lang.PersistentMap))
(keys (:impls clojure.lang.ISeq))
(extenders clojure.lang.Counted)
(extenders clojure.lang.ISeq)
(extenders Seq)
(extenders ISeq)
(extenders [])
(class {})
(extenders clojure.lang.PersistentArrayMap)
(extenders clojure.lang.APersistentArrayMap)
(extenders clojure.lang.IPersistentArrayMap)
(extenders clojure.lang.IPersistent)
(extenders clojure.lang.IPersistentCollection)
clojure.lang.IPersistentCollection
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
(make-array)
(make-array 1)
(make-array 1 1)
(doc make-array)
(extenders [])
(ancestors [])
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
clojure.lang.IPersistentCollection
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
clojure.lang.APersistentCollection
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
(ancestors [])
(ancestors clojure.lang.PersistentArray)
(ancestors clojure.lang.PersistentHash)
(ancestors clojure.lang.PersistentList)
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
ILookup
 (require '[marcliberatore.mallet.alphabet :as lda-abc] :reload-all)
